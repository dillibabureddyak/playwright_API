"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalize = exports.getLabel = exports.Label = void 0;
var Label;
(function (Label) {
    Label["Expected"] = "Expected:";
    Label["Received"] = "Received:";
    Label["ExpectedValue"] = "Expected value:";
    Label["ReceivedValue"] = "Received value:";
    Label["ExpectedPath"] = "Expected path:";
    Label["ReceivedPath"] = "Received path:";
    Label["Text"] = "text:";
    Label["Url"] = "URL:";
    Label["StatusCode"] = "status code:";
    Label["StatusText"] = "status text:";
    Label["JSON"] = "JSON:";
    Label["Location"] = "location:";
    Label["Headers"] = "headers:";
    Label["Header"] = "header name:";
    Label["ContentType"] = "content type:";
})(Label || (exports.Label = Label = {}));
const getLabel = (matcherName) => {
    switch (matcherName) {
        case 'toHaveStatusCode':
        case 'toBeForbidden':
        case 'toBeUnauthorized':
        case 'toBeNotFound':
        case 'toBeCreated':
            return Label.StatusCode;
        case 'toHaveStatusText':
            return Label.StatusText;
        case 'toContainTextContent':
            return Label.Text;
        case 'toHaveJSON':
        case 'toContainJSON':
        case 'toMatchJSON':
            return Label.JSON;
        case 'toHaveLocation':
            return Label.Location;
        case 'toHaveHeaders':
            return Label.Headers;
        case 'toHaveHeader':
            return Label.Header;
        case 'toBeRedirected':
            return Label.Url;
        case 'toHaveContentType':
            return Label.ContentType;
        default: {
            return Label.Expected;
        }
    }
};
exports.getLabel = getLabel;
const normalize = (message, originalMatcherName, expectedMatcherName) => {
    const label = (0, exports.getLabel)(expectedMatcherName);
    return message
        .replaceAll(originalMatcherName, expectedMatcherName)
        .replaceAll(Label.Expected, `Expected ${label}`)
        .replaceAll(Label.ExpectedValue, `Expected ${label}`)
        .replaceAll(Label.Received, `Received ${label}`)
        .replaceAll(Label.ReceivedValue, `Received ${label}`)
        .replaceAll(Label.ExpectedPath, `Expected ${label}`)
        .replaceAll(Label.ReceivedPath, `Received ${label}`);
};
exports.normalize = normalize;
